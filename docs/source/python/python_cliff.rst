.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 con otros apasionados.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas t√©cnicos y posventa con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _py_cliff:

6. Detecci√≥n de acantilados 
===============================

Vamos a dotar al PiCar-X de un poco de conciencia de autoprotecci√≥n y ense√±arle a usar su propio m√≥dulo de escala de grises para evitar caer por un acantilado.

En este ejemplo, el coche estar√° en reposo. 
Si lo empujas hacia un acantilado, se activar√° de inmediato, retroceder√° y dir√° "peligro".

**Ejecutar el c√≥digo**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 6.cliff_detection.py
    

**C√≥digo**

.. note::
    Puedes **Modificar/Restablecer/Copiar/Ejecutar/Detener** el c√≥digo a continuaci√≥n. Pero antes de eso, debes ir a la ruta del c√≥digo fuente como ``picar-x/example``. Despu√©s de modificar el c√≥digo, puedes ejecutarlo directamente para ver el efecto.

.. raw:: html

    <run></run>

.. code-block:: python

    from picarx import Picarx
    from time import sleep
    from robot_hat import TTS

    tts = TTS()
    tts.lang("en-US")

    px = Picarx()
    # px = Picarx(grayscale_pins=['A0', 'A1', 'A2'])
    # modificar manualmente el valor de referencia
    px.set_cliff_reference([200, 200, 200])

    current_state = None
    px_power = 10
    offset = 20
    last_state = "safe"

    if __name__=='__main__':
        try:
            while True:
                gm_val_list = px.get_grayscale_data()
                gm_state = px.get_cliff_status(gm_val_list)
                # print("El estado del acantilado es:  %s"%gm_state)

                if gm_state is False:
                    state = "safe"
                    px.stop()
                else:
                    state = "danger"   
                    px.backward(80)
                    if last_state == "safe":
                        tts.say("danger")
                        sleep(0.1)
                last_state = state

        finally:
            px.stop()
            print("stop and exit")
            sleep(0.1)

**¬øC√≥mo funciona?** 

La funci√≥n para detectar acantilados funciona as√≠:

* ``get_grayscale_data()``: Este m√©todo proporciona directamente las lecturas de los tres sensores, de derecha a izquierda. Cuanto m√°s brillante sea la zona, mayor ser√° el valor obtenido.

* ``get_cliff_status(gm_val_list)``: Este m√©todo compara las lecturas de las tres sondas y da un resultado. Si el resultado es verdadero, se detecta que hay un acantilado delante del coche.

