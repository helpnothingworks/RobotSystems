.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des projets avec Raspberry Pi, Arduino et ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces et aper√ßus de nouveaux produits.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des promotions et √† des concours lors d'√©v√©nements sp√©ciaux.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_cliff:

6. D√©tection de Falaise 
===========================

Apprenons √† PiCar-X un peu de conscience de protection pour qu'il utilise son module de niveaux de gris afin d'√©viter de tomber d'une falaise.

Dans cet exemple, la voiture sera en veille. 
Si vous la poussez vers une falaise, elle se r√©veillera imm√©diatement, reculera et dira "danger".

**Ex√©cution du Code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 6.cliff_detection.py
    

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Avant cela, vous devez vous rendre dans le r√©pertoire du code source comme ``picar-x/example``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from picarx import Picarx
    from time import sleep
    from robot_hat import TTS

    tts = TTS()
    tts.lang("en-US")

    px = Picarx()
    # px = Picarx(grayscale_pins=['A0', 'A1', 'A2'])
    # modifier manuellement la valeur de r√©f√©rence
    px.set_cliff_reference([200, 200, 200])

    current_state = None
    px_power = 10
    offset = 20
    last_state = "safe"

    if __name__=='__main__':
        try:
            while True:
                gm_val_list = px.get_grayscale_data()
                gm_state = px.get_cliff_status(gm_val_list)
                # print("√©tat de la falaise :  %s"%gm_state)

                if gm_state is False:
                    state = "safe"
                    px.stop()
                else:
                    state = "danger"   
                    px.backward(80)
                    if last_state == "safe":
                        tts.say("danger")
                        sleep(0.1)
                last_state = state

        finally:
            px.stop()
            print("stop and exit")
            sleep(0.1)

**Comment √ßa fonctionne ?** 

La fonction de d√©tection de falaise fonctionne comme suit :



* ``get_grayscale_data()`` : Cette m√©thode renvoie directement les relev√©s des trois capteurs, de droite √† gauche. Plus la zone est lumineuse, plus la valeur obtenue est grande.

* ``get_cliff_status(gm_val_list)`` : Cette m√©thode compare les relev√©s des trois sondes et donne un r√©sultat. Si le r√©sultat est vrai, une falaise est d√©tect√©e devant la voiture.

