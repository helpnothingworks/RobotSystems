.. note::

    ¬°Hola! Bienvenido a la comunidad de entusiastas de SunFounder Raspberry Pi, Arduino y ESP32 en Facebook. ¬°Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 junto con otros entusiastas!

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_tts:

3. Texto a Voz y Efectos de Sonido
=========================================

En este ejemplo, usamos los efectos de sonido de PiCar-X (o m√°s espec√≠ficamente, de Robot HAT). 
Consiste en tres partes: M√∫sica, Sonido y Texto a Voz.


**Instalar i2samp**

Antes de usar las funciones de Texto a Voz (TTS) y los Efectos de Sonido, 
primero activa el altavoz para que est√© habilitado y pueda emitir sonidos.

Ejecuta ``i2samp.sh`` en la carpeta **picar-x**, 
y este script instalar√° todo lo necesario para usar el amplificador i2s.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x
    sudo bash i2samp.sh 

.. image:: img/tt_bash.png

Habr√° varios mensajes pidiendo confirmar la solicitud. Responde a todos los mensajes con un **Y**. Despu√©s de que se hayan realizado los cambios en el sistema de Raspberry Pi, ser√° necesario reiniciar el equipo para que los cambios surtan efecto.

Despu√©s de reiniciar, ejecuta nuevamente el script ``i2samp.sh`` para probar el amplificador. Si se reproduce sonido correctamente desde el altavoz, la configuraci√≥n estar√° completa.

**Ejecutar el C√≥digo**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 3.tts_example.py
    
Despu√©s de ejecutar el c√≥digo, sigue las instrucciones que se imprimir√°n en el terminal.

¬°Introduce una tecla para llamar a la funci√≥n!

    * espacio: Reproducir efecto de sonido (Bocina de coche)
    * c: Reproducir efecto de sonido con hilos
    * t: Texto a decir (Decir Hola)
    * q: Reproducir/Detener m√∫sica

**C√≥digo**

.. code-block:: python

    from time import sleep
    from robot_hat import Music,TTS
    import readchar

    music = Music()
    tts = TTS()

    manual = '''
    Introduce una tecla para llamar a la funci√≥n:
        espacio: Reproducir efecto de sonido (Bocina de coche)
        c: Reproducir efecto de sonido con hilos
        t: Texto a decir
        q: Reproducir/Detener m√∫sica
    '''

    def main():
        print(manual)

        flag_bgm = False
        music.music_set_volume(20)
        tts.lang("en-US")


        while True:
            key = readchar.readkey()
            key = key.lower()
            if key == "q":
                flag_bgm = not flag_bgm
                if flag_bgm is True:
                    music.music_play('../musics/slow-trail-Ahjay_Stelino.mp3')
                else:
                    music.music_stop()

            elif key == readchar.key.SPACE:
                music.sound_play('../sounds/car-double-horn.wav')
                sleep(0.05)

            elif key == "c":
                music.sound_play_threading('../sounds/car-double-horn.wav')
                sleep(0.05)

            elif key == "t":
                words = "Hello"
                tts.say(words)

    if __name__ == "__main__":
        main()

**¬øC√≥mo funciona?**

Las funciones relacionadas con la m√∫sica de fondo incluyen:

* ``music = Music()`` : Declara el objeto.
* ``music.music_set_volume(20)`` : Ajusta el volumen, el rango es de 0~100.
* ``music.music_play('../musics/slow-trail-Ahjay_Stelino.mp3')`` : Reproduce archivos de m√∫sica, en este caso el archivo **slow-trail-Ahjay_Stelino.mp3** que est√° en la ruta ``../musics``.
* ``music.music_stop()`` : Detiene la m√∫sica de fondo.

.. note::

    Puedes agregar diferentes efectos de sonido o m√∫sica a la carpeta ``musics`` o ``sounds`` mediante :ref:`filezilla`.

Las funciones relacionadas con los efectos de sonido incluyen:

* ``music = Music()``
* ``music.sound_play('../sounds/car-double-horn.wav')`` : Reproduce el archivo de efecto de sonido.
* ``music.sound_play_threading('../sounds/car-double-horn.wav')`` : Reproduce el archivo de efecto de sonido en un nuevo hilo sin suspender el hilo principal.

El software `eSpeak <http://espeak.sourceforge.net/>`_ se utiliza para implementar las funciones de TTS.

Importa el m√≥dulo TTS en robot_hat, que encapsula funciones que convierten texto en voz.

Las funciones relacionadas con Texto a Voz incluyen:

* ``tts = TTS()``
* ``tts.say(words)`` : Reproducci√≥n de texto en audio.
* ``tts.lang("en-US")`` :  Configura el idioma.

.. note:: 

    Configura el idioma utilizando los par√°metros de ``lang("")`` con los siguientes caracteres.

.. list-table:: Idioma
    :widths: 15 50

    *   - zh-CN 
        - Mandar√≠n (Chino)
    *   - en-US 
        - Ingl√©s-Estados Unidos
    *   - en-GB     
        - Ingl√©s-Reino Unido
    *   - de-DE     
        - Alem√°n-Deutsch
    *   - es-ES     
        - Espa√±a-Espa√±ol
    *   - fr-FR  
        - Francia-Franc√©s
    *   - it-IT  
        - Italia-Italiano
