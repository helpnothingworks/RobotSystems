.. note::

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux nouvelles annonces de produits et √† des avant-go√ªts exclusifs.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et concours festifs** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_tts:

3. Synth√®se vocale & Effet sonore
====================================

Dans cet exemple, nous utilisons les effets sonores de PiCar-X (ou plus pr√©cis√©ment, de Robot HAT).
Cela comprend trois parties : la Musique, les Sons et la Synth√®se vocale (TTS).

.. image:: img/how_are_you.jpg

**Installer i2samp**

Avant d'utiliser les fonctions de Synth√®se vocale (TTS) et d'Effet sonore, 
vous devez d'abord activer le haut-parleur pour qu'il soit fonctionnel et √©mette des sons.

Ex√©cutez ``i2samp.sh`` dans le dossier **picar-x**,
ce script installera tout ce qui est n√©cessaire pour utiliser l'amplificateur i2s.

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x
    sudo bash i2samp.sh 

.. image:: img/tt_bash.png

Il y aura plusieurs invites demandant de confirmer l'action. R√©pondez √† toutes avec **Y**. Apr√®s que les modifications ont √©t√© effectu√©es sur le syst√®me Raspberry Pi, l'ordinateur devra red√©marrer pour que ces changements prennent effet.

Apr√®s le red√©marrage, ex√©cutez √† nouveau le script ``i2samp.sh`` pour tester l'amplificateur. Si un son est jou√© correctement √† partir du haut-parleur, la configuration est termin√©e.

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 3.tts_example.py

Apr√®s avoir ex√©cut√© le code, suivez les instructions affich√©es dans le terminal.

Appuyez sur une touche pour appeler la fonction !

    * espace : Jouer l'effet sonore (Klaxon de voiture)
    * c : Jouer l'effet sonore avec des threads
    * t : Parler un texte (Dire Bonjour)
    * q : Lire/Arr√™ter la musique

**Code**

.. code-block:: python

    from time import sleep
    from robot_hat import Music,TTS
    import readchar

    music = Music()
    tts = TTS()

    manual = '''
    Input key to call the function!
        space: Play sound effect (Car horn)
        c: Play sound effect with threads
        t: Text to speak
        q: Play/Stop Music
    '''

    def main():
        print(manual)

        flag_bgm = False
        music.music_set_volume(20)
        tts.lang("en-US")


        while True:
            key = readchar.readkey()
            key = key.lower()
            if key == "q":
                flag_bgm = not flag_bgm
                if flag_bgm is True:
                    music.music_play('../musics/slow-trail-Ahjay_Stelino.mp3')
                else:
                    music.music_stop()

            elif key == readchar.key.SPACE:
                music.sound_play('../sounds/car-double-horn.wav')
                sleep(0.05)

            elif key == "c":
                music.sound_play_threading('../sounds/car-double-horn.wav')
                sleep(0.05)

            elif key == "t":
                words = "Hello"
                tts.say(words)

    if __name__ == "__main__":
        main()

**Comment √ßa fonctionne ?**

Les fonctions li√©es √† la musique de fond incluent :

* ``music = Music()`` : D√©clare l'objet.
* ``music.music_set_volume(20)`` : D√©finit le volume, l'intervalle est de 0 √† 100.
* ``music.music_play('../musics/slow-trail-Ahjay_Stelino.mp3')`` : Joue des fichiers musicaux, ici le fichier **slow-trail-Ahjay_Stelino.mp3** situ√© dans le dossier ``../musics``.
* ``music.music_stop()`` : Arr√™te la lecture de la musique de fond.

.. note::

    Vous pouvez ajouter diff√©rents effets sonores ou musiques dans les dossiers ``musics`` ou ``sounds`` via :ref:`filezilla`.

Les fonctions li√©es aux effets sonores incluent :

* ``music = Music()``
* ``music.sound_play('../sounds/car-double-horn.wav')`` : Joue le fichier sonore.
* ``music.sound_play_threading('../sounds/car-double-horn.wav')`` : Joue le fichier sonore dans un mode thread sans suspendre le thread principal.

Le logiciel `eSpeak <http://espeak.sourceforge.net/>`_ est utilis√© pour impl√©menter les fonctions de synth√®se vocale.

Importez le module TTS de robot_hat, qui encapsule les fonctions convertissant du texte en parole.

Les fonctions li√©es √† la Synth√®se vocale incluent :

* ``tts = TTS()``
* ``tts.say(words)`` : Joue un fichier audio de texte.
* ``tts.lang("en-US")`` : D√©finit la langue.

.. note:: 

    D√©finissez la langue en param√©trant ``lang("")`` avec les caract√®res suivants.

.. list-table:: Langue
    :widths: 15 50

    *   - zh-CN 
        - Mandarin (Chinois)
    *   - en-US 
        - Anglais (√âtats-Unis)
    *   - en-GB     
        - Anglais (Royaume-Uni)
    *   - de-DE     
        - Allemand
    *   - es-ES     
        - Espagnol
    *   - fr-FR  
        - Fran√ßais
    *   - it-IT  
        - Italien
