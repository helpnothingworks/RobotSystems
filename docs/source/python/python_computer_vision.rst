.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des projets avec Raspberry Pi, Arduino et ESP32 aux c√¥t√©s d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces et aper√ßus de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des promotions et concours lors d'√©v√©nements sp√©ciaux.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_computer_vision:

7. Vision par Ordinateur
============================

Ce projet vous fera entrer officiellement dans le domaine de la vision par ordinateur !

**Ex√©cuter le Code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 7.display.py

**Voir l'image**

Apr√®s l'ex√©cution du code, le terminal affichera le message suivant :

.. code-block::

    Pas de bureau !
    * Serve Flask app "vilib.vilib" (chargement paresseux)
    * Environnement : production
    AVERTISSEMENT : N'utilisez pas le serveur de d√©veloppement en production.
    Utilisez un serveur WSGI de production √† la place.
    * Mode d√©bogage : d√©sactiv√©
    * Fonctionne sur http://0.0.0.0:9000/ (Appuyez sur CTRL+C pour quitter)

Ensuite, vous pouvez entrer ``http://<votre IP>:9000/mjpg`` dans le navigateur pour voir l'√©cran vid√©o. Exemple :  ``https://192.168.18.113:9000/mjpg``

.. image:: img/display.png


Une fois le programme ex√©cut√©, vous verrez les informations suivantes dans le terminal :

* Appuyez sur une touche pour appeler la fonction !
* q : Prendre une photo
* 1 : D√©tection de couleur : rouge
* 2 : D√©tection de couleur : orange
* 3 : D√©tection de couleur : jaune
* 4 : D√©tection de couleur : vert
* 5 : D√©tection de couleur : bleu
* 6 : D√©tection de couleur : violet
* 0 : D√©sactiver la d√©tection de couleur
* r : Scanner le code QR
* f : Activer/d√©sactiver la d√©tection de visage
* s : Afficher les informations sur l'objet d√©tect√©

Veuillez suivre les indications pour activer les fonctions correspondantes.

    *  **Prendre une photo**

        Tapez ``q`` dans le terminal et appuyez sur Entr√©e. L'image actuellement vue par la cam√©ra sera enregistr√©e (si la fonction de d√©tection de couleur est activ√©e, la bo√Æte de marquage appara√Ætra √©galement dans l'image enregistr√©e). 
        Vous pouvez consulter ces photos dans le r√©pertoire ``/home/{username}/Pictures/`` du Raspberry Pi.
        Vous pouvez utiliser des outils tels que :ref:`filezilla` pour transf√©rer les photos sur votre PC.
        

    *  **D√©tection de couleur**

        Entrer un nombre entre ``1~6`` permet de d√©tecter l'une des couleurs : "rouge, orange, jaune, vert, bleu, violet". Tapez ``0`` pour d√©sactiver la d√©tection de couleur.

        .. image:: img/DTC2.png

        .. note:: Vous pouvez t√©l√©charger et imprimer les :download:`Cartes de couleur PDF <https://github.com/sunfounder/sf-pdf/raw/master/prop_card/object_detection/color-cards.pdf>` pour la d√©tection de couleur.


    *  **D√©tection de visage**

        Tapez ``f`` pour activer la d√©tection de visage.

        .. image:: img/DTC5.png

    *  **D√©tection de code QR**

        Tapez ``r`` pour activer la reconnaissance de code QR. Aucune autre op√©ration ne pourra √™tre effectu√©e tant que le code QR ne sera pas reconnu. Les informations de d√©codage du code QR seront affich√©es dans le terminal.

        .. image:: img/DTC4.png

    *  **Afficher les informations**

        Tapez ``s`` pour afficher les informations sur les cibles de d√©tection de visage (et de couleur) dans le terminal, y compris les coordonn√©es centrales (X, Y) et la taille (largeur, hauteur) de l'objet d√©tect√©.


**Code** 

.. code-block:: python

    from pydoc import text
    from vilib import Vilib
    from time import sleep, time, strftime, localtime
    import threading
    import readchar
    import os

    flag_face = False
    flag_color = False
    qr_code_flag = False

    manual = '''
    Input key to call the function!
        q: Take photo
        1: Color detect : red
        2: Color detect : orange
        3: Color detect : yellow
        4: Color detect : green
        5: Color detect : blue
        6: Color detect : purple
        0: Switch off Color detect
        r: Scan the QR code
        f: Switch ON/OFF face detect
        s: Display detected object information
    '''

    color_list = ['close', 'red', 'orange', 'yellow',
            'green', 'blue', 'purple',
    ]

    def face_detect(flag):
        print("Face Detect:" + str(flag))
        Vilib.face_detect_switch(flag)


    def qrcode_detect():
        global qr_code_flag
        if qr_code_flag == True:
            Vilib.qrcode_detect_switch(True)
            print("Waitting for QR code")

        text = None
        while True:
            temp = Vilib.detect_obj_parameter['qr_data']
            if temp != "None" and temp != text:
                text = temp
                print('QR code:%s'%text)
            if qr_code_flag == False:
                break
            sleep(0.5)
        Vilib.qrcode_detect_switch(False)


    def take_photo():
        _time = strftime('%Y-%m-%d-%H-%M-%S',localtime(time()))
        name = 'photo_%s'%_time
        username = os.getlogin()

        path = f"/home/{username}/Pictures/"
        Vilib.take_photo(name, path)
        print('photo save as %s%s.jpg'%(path,name))


    def object_show():
        global flag_color, flag_face

        if flag_color is True:
            if Vilib.detect_obj_parameter['color_n'] == 0:
                print('Color Detect: None')
            else:
                color_coodinate = (Vilib.detect_obj_parameter['color_x'],Vilib.detect_obj_parameter['color_y'])
                color_size = (Vilib.detect_obj_parameter['color_w'],Vilib.detect_obj_parameter['color_h'])
                print("[Color Detect] ","Coordinate:",color_coodinate,"Size",color_size)

        if flag_face is True:
            if Vilib.detect_obj_parameter['human_n'] == 0:
                print('Face Detect: None')
            else:
                human_coodinate = (Vilib.detect_obj_parameter['human_x'],Vilib.detect_obj_parameter['human_y'])
                human_size = (Vilib.detect_obj_parameter['human_w'],Vilib.detect_obj_parameter['human_h'])
                print("[Face Detect] ","Coordinate:",human_coodinate,"Size",human_size)


    def main():
        global flag_face, flag_color, qr_code_flag
        qrcode_thread = None

        Vilib.camera_start(vflip=False,hflip=False)
        Vilib.display(local=True,web=True)
        print(manual)

        while True:
            # readkey
            key = readchar.readkey()
            key = key.lower()
            # prendre une photo
            if key == 'q':
                take_photo()
            # d√©tection de couleur
            elif key != '' and key in ('0123456'):  # '' in ('0123') -> True
                index = int(key)
                if index == 0:
                    flag_color = False
                    Vilib.color_detect('fermer')
                else:
                    flag_color = True
                    Vilib.color_detect(color_list[index]) # color_detect(color:str -> color_name/fermer)
                print('Color detect : %s'%color_list[index])
            # d√©tection de visage
            elif key =="f":
                flag_face = not flag_face
                face_detect(flag_face)
            # d√©tection de code QR
            elif key =="r":
                qr_code_flag = not qr_code_flag
                if qr_code_flag == True:
                    if qrcode_thread == None or not qrcode_thread.is_alive():
                        qrcode_thread = threading.Thread(target=qrcode_detect)
                        qrcode_thread.setDaemon(True)
                        qrcode_thread.start()
                else:
                    if qrcode_thread != None and qrcode_thread est vivant:
                    # attendre la fin du thread
                        qrcode_thread.join()
                        print('QRcode Detect: close')
            # afficher les informations de l'objet d√©tect√©
            elif key == "s":
                object_show()

            sleep(0.5)


    if __name__ == "__main__":
        main()

**Comment √ßa fonctionne ?**

La premi√®re chose √† noter est la fonction suivante. Ces deux fonctions permettent de d√©marrer la cam√©ra.

.. code-block:: python

    Vilib.camera_start()
    Vilib.display()

Fonctions li√©es √† la "d√©tection d'objets" :

* ``Vilib.face_detect_switch(True)`` : Activer/d√©sactiver la d√©tection de visage
* ``Vilib.color_detect(couleur)`` : Pour la d√©tection de couleur, seule une d√©tection de couleur peut √™tre effectu√©e √† la fois. Les param√®tres accept√©s sont : ``"rouge"``, ``"orange"``, ``"jaune"``, ``"vert"``, ``"bleu"``, ``"violet"``
* ``Vilib.color_detect_switch(False)`` : D√©sactiver la d√©tection de couleur
* ``Vilib.qrcode_detect_switch(False)`` : Activer/d√©sactiver la d√©tection de code QR, renvoie les donn√©es d√©cod√©es du code QR.
* ``Vilib.gesture_detect_switch(False)`` : Activer/d√©sactiver la d√©tection de gestes
* ``Vilib.traffic_sign_detect_switch(False)`` : Activer/d√©sactiver la d√©tection de panneaux de signalisation

Les informations d√©tect√©es par l'objet cible seront stock√©es dans le dictionnaire ``detect_obj_parameter = Manager().dict()``.

Dans le programme principal, vous pouvez l'utiliser de cette mani√®re :

.. code-block:: python

    Vilib.detect_obj_parameter['color_x']

Les cl√©s du dictionnaire et leurs usages sont r√©pertori√©s dans la liste suivante :

* ``color_x`` : la valeur x de la coordonn√©e centrale du bloc de couleur d√©tect√©, plage de 0 √† 320
* ``color_y`` : la valeur y de la coordonn√©e centrale du bloc de couleur d√©tect√©, plage de 0 √† 240
* ``color_w`` : la largeur du bloc de couleur d√©tect√©, plage de 0 √† 320
* ``color_h`` : la hauteur du bloc de couleur d√©tect√©, plage de 0 √† 240
* ``color_n`` : le nombre de blocs de couleur d√©tect√©s
* ``human_x`` : la valeur x de la coordonn√©e centrale du visage humain d√©tect√©, plage de 0 √† 320
* ``human_y`` : la valeur y de la coordonn√©e centrale du visage humain d√©tect√©, plage de 0 √† 240
* ``human_w`` : la largeur du visage humain d√©tect√©, plage de 0 √† 320
* ``human_h`` : la hauteur du visage humain d√©tect√©, plage de 0 √† 240
* ``human_n`` : le nombre de visages d√©tect√©s
* ``traffic_sign_x`` : la valeur x de la coordonn√©e centrale du panneau de signalisation d√©tect√©, plage de 0 √† 320
* ``traffic_sign_y`` : la valeur y de la coordonn√©e centrale du panneau de signalisation d√©tect√©, plage de 0 √† 240
* ``traffic_sign_w`` : la largeur du panneau de signalisation d√©tect√©, plage de 0 √† 320
* ``traffic_sign_h`` : la hauteur du panneau de signalisation d√©tect√©, plage de 0 √† 240
* ``traffic_sign_t`` : le contenu du panneau de signalisation d√©tect√©, la liste des valeurs est `['stop','right','left','forward']`
* ``gesture_x`` : La valeur x de la coordonn√©e centrale du geste d√©tect√©, plage de 0 √† 320
* ``gesture_y`` : La valeur y de la coordonn√©e centrale du geste d√©tect√©, plage de 0 √† 240
* ``gesture_w`` : La largeur du geste d√©tect√©, plage de 0 √† 320
* ``gesture_h`` : La hauteur du geste d√©tect√©, plage de 0 √† 240
* ``gesture_t`` : Le contenu du geste d√©tect√©, la liste des valeurs est `["papier","ciseaux","pierre"]`
* ``qr_date`` : le contenu du code QR d√©tect√©
* ``qr_x`` : la valeur x de la coordonn√©e centrale du code QR √† d√©tecter, plage de 0 √† 320
* ``qr_y`` : la valeur y de la coordonn√©e centrale du code QR √† d√©tecter, plage de 0 √† 240
* ``qr_w`` : la largeur du code QR √† d√©tecter, plage de 0 √† 320
* ``qr_h`` : la hauteur du code QR √† d√©tecter, plage de 0 √† 320
