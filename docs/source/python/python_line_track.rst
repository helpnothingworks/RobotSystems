.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, d'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_line_tracking:

5. Suivi de ligne
====================================

Dans ce projet, nous allons utiliser le module de d√©tection de niveaux de 
gris pour faire avancer le PiCar-X le long d'une ligne. Utilisez un ruban adh√©sif de couleur sombre pour tracer une ligne aussi droite que possible, et √©vitez les courbes trop prononc√©es. Quelques ajustements peuvent √™tre n√©cessaires si le PiCar-X d√©raille.

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 5.minecart_plus.py
    
Apr√®s avoir ex√©cut√© le code, le PiCar-X se d√©placera le long de la ligne.

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez aller dans le chemin du code source, comme ``picar-x/example``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir le r√©sultat.

.. raw:: html

    <run></run>

.. code-block:: python

    from picarx import Picarx
    from time import sleep

    px = Picarx()
    # px = Picarx(grayscale_pins=['A0', 'A1', 'A2'])

    # Veuillez ex√©cuter ./calibration/grayscale_calibration.py pour calibrer automatiquement les valeurs de niveaux de gris
    # ou modifiez manuellement la valeur de r√©f√©rence avec le code suivant
    # px.set_line_reference([1400, 1400, 1400])

    current_state = None
    px_power = 10
    offset = 20
    last_state = "stop"

    def outHandle():
        global last_state, current_state
        if last_state == 'left':
            px.set_dir_servo_angle(-30)
            px.backward(10)
        elif last_state == 'right':
            px.set_dir_servo_angle(30)
            px.backward(10)
        while True:
            gm_val_list = px.get_grayscale_data()
            gm_state = get_status(gm_val_list)
            print("outHandle gm_val_list: %s, %s"%(gm_val_list, gm_state))
            currentSta = gm_state
            if currentSta != last_state:
                break
        sleep(0.001)

    def get_status(val_list):
        _state = px.get_line_status(val_list)  # [bool, bool, bool], 0 means line, 1 means background
        if _state == [0, 0, 0]:
            return 'stop'
        elif _state[1] == 1:
            return 'forward'
        elif _state[0] == 1:
            return 'right'
        elif _state[2] == 1:
            return 'left'

    if __name__=='__main__':
        try:
            while True:
                gm_val_list = px.get_grayscale_data()
                gm_state = get_status(gm_val_list)
                print("gm_val_list: %s, %s"%(gm_val_list, gm_state))

                if gm_state != "stop":
                    last_state = gm_state

                if gm_state == 'forward':
                    px.set_dir_servo_angle(0)
                    px.forward(px_power) 
                elif gm_state == 'left':
                    px.set_dir_servo_angle(offset)
                    px.forward(px_power) 
                elif gm_state == 'right':
                    px.set_dir_servo_angle(-offset)
                    px.forward(px_power) 
                else:
                    outHandle()
        finally:
            px.stop()
            print("stop and exit")
            sleep(0.1)
       

**Comment √ßa fonctionne ?**

Ce script Python contr√¥le une voiture robot PiCarx en utilisant des capteurs de niveaux de gris pour la navigation. Voici une explication de ses principales composantes :

* Importation et initialisation :

    Le script importe la classe Picarx pour contr√¥ler la voiture robot et la fonction sleep du module time pour ajouter des d√©lais.

    Une instance de Picarx est cr√©√©e, avec une ligne comment√©e montrant une autre initialisation avec des broches de capteurs de niveaux de gris sp√©cifiques.

    .. code-block:: python
        
        from picarx import Picarx
        from time import sleep

        px = Picarx()

* Configuration et variables globales :

    ``current_state``, ``px_power``, ``offset``, et ``last_state`` sont des variables globales utilis√©es pour suivre et contr√¥ler les mouvements de la voiture. ``px_power`` d√©finit la puissance du moteur, et ``offset`` est utilis√© pour ajuster l'angle de direction.

    .. code-block:: python

        current_state = None
        px_power = 10
        offset = 20
        last_state = "stop"

* Fonction ``outHandle`` :

    Cette fonction est appel√©e lorsque la voiture doit g√©rer un sc√©nario de "sortie de ligne".

    Elle ajuste la direction de la voiture en fonction de ``last_state`` et v√©rifie les valeurs des capteurs de niveaux de gris pour d√©terminer le nouvel √©tat.

    .. code-block:: python

        def outHandle():
            global last_state, current_state
            if last_state == 'left':
                px.set_dir_servo_angle(-30)
                px.backward(10)
            elif last_state == 'right':
                px.set_dir_servo_angle(30)
                px.backward(10)
            while True:
                gm_val_list = px.get_grayscale_data()
                gm_state = get_status(gm_val_list)
                print("outHandle gm_val_list: %s, %s"%(gm_val_list, gm_state))
                currentSta = gm_state
                if currentSta != last_state:
                    break
            sleep(0.001)

* Fonction ``get_status`` :

    Cette fonction interpr√®te les donn√©es du capteur de niveaux de gris (``val_list``) pour d√©terminer l'√©tat de navigation de la voiture.

    L'√©tat de la voiture peut √™tre "forward", "left", "right" ou "stop", selon le capteur qui d√©tecte la ligne.

    .. code-block:: python
        
        def get_status(val_list):
            _state = px.get_line_status(val_list)  # [bool, bool, bool], 0 means line, 1 means background
            if _state == [0, 0, 0]:
                return 'stop'
            elif _state[1] == 1:
                return 'forward'
            elif _state[0] == 1:
                return 'right'
            elif _state[2] == 1:
                return 'left'

* Boucle principale :

    La boucle ``while True`` v√©rifie continuellement les donn√©es des capteurs de niveaux de gris et ajuste les mouvements de la voiture en cons√©quence.

    En fonction de l'√©tat ``gm_state``, elle d√©finit l'angle de direction et la direction du mouvement.

    .. code-block:: python

        if __name__=='__main__':
            try:
                while True:
                    gm_val_list = px.get_grayscale_data()
                    gm_state = get_status(gm_val_list)
                    print("gm_val_list: %s, %s"%(gm_val_list, gm_state))

                    if gm_state != "stop":
                        last_state = gm_state

                    if gm_state == 'forward':
                        px.set_dir_servo_angle(0)
                        px.forward(px_power) 
                    elif gm_state == 'left':
                        px.set_dir_servo_angle(offset)
                        px.forward(px_power) 
                    elif gm_state == 'right':
                        px.set_dir_servo_angle(-offset)
                        px.forward(px_power) 
                    else:
                        outHandle()

* S√©curit√© et nettoyage :

    Le bloc ``try...finally`` garantit que la voiture s'arr√™te lorsque le script est interrompu ou termin√©.

    .. code-block:: python
        
        finally:
        px.stop()
        print("stop and exit")
        sleep(0.1)

En r√©sum√©, le script utilise des capteurs de niveaux de gris pour naviguer avec la voiture robot PiCarx. Il lit continuellement les donn√©es des capteurs pour d√©terminer la direction et ajuste les mouvements et la direction de la voiture en cons√©quence. La fonction outHandle fournit une logique suppl√©mentaire pour les situations o√π la voiture doit ajuster son chemin de mani√®re significative.
