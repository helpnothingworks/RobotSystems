.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers du Raspberry Pi, d'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et surmontez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions exclusives** : Profitez de remises sp√©ciales sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions lors des f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_avoid:

4. √âvitement d'obstacles
=============================

Dans ce projet, le PiCar-X d√©tectera les obstacles devant lui pendant qu'il avance, 
et lorsque les obstacles seront trop proches, il changera de direction pour continuer √† avancer.

**Ex√©cution du code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picar-x/example
    sudo python3 4.avoiding_obstacles.py
    
Apr√®s avoir ex√©cut√© le code, le PiCar-X avancera.

S'il d√©tecte que la distance de l'obstacle devant est inf√©rieure √† 20 cm, il reculera.

Si un obstacle se trouve √† une distance comprise entre 20 et 40 cm, il tournera √† gauche.

S'il n'y a pas d'obstacle apr√®s avoir tourn√© √† gauche ou si la distance de l'obstacle est sup√©rieure √† 25 cm, 
il continuera d'avancer.

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le chemin du code source comme ``picar-x/example``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from picarx import Picarx
    import time
    
    POWER = 50
    SafeDistance = 40   # > 40 s√ªr
    DangerDistance = 20 # > 20 && < 40 tourner, 
                        # < 20 reculer
    
    def main():
        try:
            px = Picarx()
            # px = Picarx(ultrasonic_pins=['D2','D3']) # d√©clencheur, √©cho
           
            while True:
                distance = round(px.ultrasonic.read(), 2)
                print("distance: ",distance)
                if distance >= SafeDistance:
                    px.set_dir_servo_angle(0)
                    px.forward(POWER)
                elif distance >= DangerDistance:
                    px.set_dir_servo_angle(30)
                    px.forward(POWER)
                    time.sleep(0.1)
                else:
                    px.set_dir_servo_angle(-30)
                    px.backward(POWER)
                    time.sleep(0.5)
    
        finally:
            px.forward(0)
    
    
    if __name__ == "__main__":
        main()

**Comment √ßa marche ?**

* Importation du module Picarx et initialisation des constantes :

    Cette section du code importe la classe ``Picarx`` du module ``picarx``, qui est essentielle pour contr√¥ler le robot Picarx. Les constantes comme ``POWER``, ``SafeDistance`` et ``DangerDistance`` sont d√©finies et seront utilis√©es plus tard dans le script pour contr√¥ler le mouvement du robot en fonction des mesures de distance.

    .. code-block:: python

        from picarx import Picarx
        import time

        POWER = 50
        SafeDistance = 40 # > 40 s√ªr
        DangerDistance = 20 # > 20 && < 40 tourner,
        # < 20 reculer

* D√©finition de la fonction principale et lecture du capteur ultrasonique :

    La fonction ``main`` contr√¥le le robot Picarx. Une instance de ``Picarx`` est cr√©√©e, ce qui active les fonctionnalit√©s du robot. Le code entre dans une boucle infinie, lisant constamment la distance depuis le capteur ultrasonique. Cette distance est utilis√©e pour d√©terminer les mouvements du robot.

    .. code-block:: python
        
        def main():
        try:
        px = Picarx()

            while True:
                distance = round(px.ultrasonic.read(), 2)
                # [Rest du code]

* Logique de mouvement bas√©e sur la distance :

    Le mouvement du robot est contr√¥l√© en fonction de la distance lue par le capteur ultrasonique. Si la ``distance`` est sup√©rieure √† ``SafeDistance``, le robot avance. Si la distance est comprise entre ``DangerDistance`` et ``SafeDistance``, il tourne l√©g√®rement et avance. Si la ``distance`` est inf√©rieure √† ``DangerDistance``, le robot recule tout en tournant dans la direction oppos√©e.

    .. code-block:: python

        if distance >= SafeDistance:
            px.set_dir_servo_angle(0)
            px.forward(POWER)
        elif distance >= DangerDistance:
            px.set_dir_servo_angle(30)
            px.forward(POWER)
            time.sleep(0.1)
        else:
            px.set_dir_servo_angle(-30)
            px.backward(POWER)
            time.sleep(0.5)

* S√©curit√© et nettoyage avec le bloc 'finally' :

    Le bloc ``try...finally`` garantit la s√©curit√© en arr√™tant le mouvement du robot en cas d'interruption ou d'erreur. Cela est essentiel pour √©viter tout comportement incontr√¥lable du robot.

    .. code-block:: python
        
        try:
        # [Logique de contr√¥le]
        finally:
        px.forward(0)

* Point d'entr√©e de l'ex√©cution :

    Le point d'entr√©e standard en Python ``if __name__ == "__main__":`` est utilis√© pour ex√©cuter la fonction principale lorsque le script est lanc√© en tant que programme autonome.

    .. code-block:: python
        
        if name == "main":
            main()

En r√©sum√©, le script utilise le module Picarx pour contr√¥ler un robot, en utilisant un capteur ultrasonique pour mesurer les distances. Le mouvement du robot est adapt√© en fonction de ces mesures, garantissant un fonctionnement s√©curis√© gr√¢ce √† un contr√¥le minutieux et √† un m√©canisme de s√©curit√© dans le bloc finally.

