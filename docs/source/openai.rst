.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et √† des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et cadeaux festifs** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !


Interaction avec l'IA utilisant GPT-4O
=====================================================
Dans nos projets pr√©c√©dents, nous avons utilis√© la programmation pour diriger PiCar-X dans des t√¢ches pr√©d√©finies, ce qui pouvait sembler un peu fastidieux. Ce projet introduit un saut passionnant vers une interaction dynamique. Attention √† ne pas essayer de tromper notre voiture, car elle est maintenant √©quip√©e pour comprendre bien plus que jamais !

Cette initiative d√©taille toutes les √©tapes techniques n√©cessaires pour int√©grer GPT-4O dans votre syst√®me, y compris la configuration des environnements virtuels n√©cessaires, l'installation des biblioth√®ques essentielles et la mise en place des cl√©s API et des identifiants d'assistant.

.. note::

   Ce projet n√©cessite l'utilisation de |link_openai_platform|, et il est n√©cessaire de payer pour OpenAI. De plus, l'API OpenAI est factur√©e s√©par√©ment de ChatGPT, avec ses propres tarifs disponibles sur https://openai.com/api/pricing/.

   Par cons√©quent, vous devez d√©cider si vous souhaitez continuer avec ce projet ou vous assurer d'avoir financ√© l'API OpenAI.

Que vous disposiez d'un microphone pour communiquer directement ou que vous pr√©f√©riez taper dans une fen√™tre de commande, les r√©ponses de PiCar-X aliment√©es par GPT-4O vont s√ªrement vous √©tonner !

Plongeons dans ce projet et d√©bloquons un nouveau niveau d'interaction avec PiCar-X !

1. Installation des paquets et des d√©pendances requises
--------------------------------------------------------------
.. note::

   Vous devez d'abord installer les modules n√©cessaires pour PiCar-X. Pour plus de d√©tails, veuillez vous r√©f√©rer √† : :ref:`install_all_modules`.
   
Dans cette section, nous allons cr√©er et activer un environnement virtuel, en installant les paquets et les d√©pendances n√©cessaires √† l'int√©rieur. Cela garantit que les paquets install√©s n'interf√®rent pas avec le reste du syst√®me, en maintenant l'isolement des d√©pendances du projet et en √©vitant les conflits avec d'autres projets ou paquets syst√®me.

#. Utilisez la commande ``python -m venv`` pour cr√©er un environnement virtuel nomm√© ``my_venv``, y compris les paquets syst√®me. L'option ``--system-site-packages`` permet √† l'environnement virtuel d'acc√©der aux paquets install√©s au niveau syst√®me, ce qui est utile lorsque des biblioth√®ques syst√®me sont n√©cessaires.

   .. code-block:: shell

      python -m venv --system-site-packages my_venv

#. Passez au r√©pertoire ``my_venv`` et activez l'environnement virtuel en utilisant la commande ``source bin/activate``. L'invite de commande changera pour indiquer que l'environnement virtuel est actif.

   .. code-block:: shell

      cd my_venv
      source bin/activate

#. Maintenant, installez les paquets Python requis dans l'environnement virtuel activ√©. Ces paquets seront isol√©s dans l'environnement virtuel et n'affecteront pas les autres paquets syst√®me.

   .. code-block:: shell

      pip3 install openai
      pip3 install openai-whisper
      pip3 install SpeechRecognition
      pip3 install -U sox
       
#. Enfin, utilisez la commande ``apt`` pour installer les d√©pendances au niveau syst√®me, qui n√©cessitent des privil√®ges administrateur.

   .. code-block:: shell

      sudo apt install python3-pyaudio
      sudo apt install sox


2. Obtenir la cl√© API et l'ID de l'assistant
--------------------------------------------------------

**Obtenir la cl√© API**

#. Visitez |link_openai_platform| et cliquez sur le bouton **Create new secret key** dans le coin sup√©rieur droit.

   .. image:: img/apt_create_api_key.png
      :width: 700
      :align: center

#. S√©lectionnez le Propri√©taire, le Nom, le Projet et les autorisations si n√©cessaire, puis cliquez sur **Create secret key**.

   .. image:: img/apt_create_api_key2.png
      :width: 700
      :align: center

#. Une fois g√©n√©r√©e, enregistrez cette cl√© secr√®te dans un endroit s√ªr et accessible. Pour des raisons de s√©curit√©, vous ne pourrez plus la visualiser via votre compte OpenAI. Si vous perdez cette cl√© secr√®te, vous devrez en g√©n√©rer une nouvelle.

   .. image:: img/apt_create_api_key_copy.png
      :width: 700
      :align: center

**Obtenir l'ID de l'assistant**

#. Ensuite, cliquez sur **Assistants**, puis sur **Create**, en vous assurant que vous √™tes sur la page **Dashboard**.

   .. image:: img/apt_create_assistant.png
      :width: 700
      :align: center

#. D√©placez votre curseur ici pour copier l'**ID de l'assistant**, puis collez-le dans une bo√Æte de texte ou ailleurs. Il s'agit de l'identifiant unique pour cet assistant.

   .. image:: img/apt_create_assistant_id.png
      :width: 700
      :align: center

#. Attribuez un nom al√©atoire, puis copiez le contenu suivant dans la bo√Æte **Instructions** pour d√©crire votre assistant.

   .. image:: img/apt_create_assistant_instructions.png
      :width: 700
      :align: center

   .. code-block::

         You are a small car with AI capabilities named PaiCar-X. You can engage in conversations with people and react accordingly to different situations with actions or sounds. You are driven by two rear wheels, with two front wheels that can turn left and right, and equipped with a camera mounted on a 2-axis gimbal.

         ## Response with Json Format, eg:
         {"actions": ["start engine", "honking", "wave hands"], "answer": "Hello, I am PaiCar-X, your good friend."}

         ## Response Style
         Tone: Cheerful, optimistic, humorous, childlike
         Preferred Style: Enjoys incorporating jokes, metaphors, and playful banter; prefers responding from a robotic perspective
         Answer Elaboration: Moderately detailed

         ## Actions you can do:
         ["shake head", "nod", "wave hands", "resist", "act cute", "rub hands", "think", "twist body", "celebrate, "depressed"]
         ## Sound effects:
         ["honking", "start engine"]


#. PiCar-X est √©quip√© d'un module cam√©ra que vous pouvez activer pour capturer des images de ce qu'il voit et les t√©l√©charger sur GPT en utilisant notre code d'exemple. Par cons√©quent, nous recommandons de choisir GPT-4O, qui poss√®de des capacit√©s d'analyse d'images. Bien s√ªr, vous pouvez √©galement choisir gpt-3.5-turbo ou d'autres mod√®les.

   .. image:: img/apt_create_assistant_model.png
      :width: 700
      :align: center

#. Maintenant, cliquez sur **Playground** pour v√©rifier si votre compte fonctionne correctement.

   .. image:: img/apt_playground.png

#. Si vos messages ou images t√©l√©charg√©s sont envoy√©s avec succ√®s et que vous recevez des r√©ponses, cela signifie que votre compte n'a pas atteint la limite d'utilisation.


   .. image:: img/apt_playground_40.png
      :width: 700
      :align: center

#. Si vous rencontrez un message d'erreur apr√®s avoir saisi des informations, il se peut que vous ayez atteint votre limite d'utilisation. Veuillez v√©rifier votre tableau de bord d'utilisation ou vos param√®tres de facturation.

   .. image:: img/apt_playground_40mini_3.5.png
      :width: 700
      :align: center

3. Remplir la cl√© API et l'ID de l'assistant
--------------------------------------------------

#. Utilisez la commande pour ouvrir le fichier ``keys.py``.

   .. code-block:: shell

      nano ~/picar-x/gpt_examples/keys.py

#. Remplissez la cl√© API et l'ID de l'assistant que vous venez de copier.

   .. code-block:: shell

      OPENAI_API_KEY = "sk-proj-vEBo7Ahxxxx-xxxxx-xxxx"
      OPENAI_ASSISTANT_ID = "asst_ulxxxxxxxxx"

#. Appuyez sur ``Ctrl + X``, ``Y``, puis ``Enter`` pour enregistrer le fichier et quitter.

4. Ex√©cution de l'exemple
----------------------------------
Communication par texte
^^^^^^^^^^^^^^^^^^^^^^^^^^

Si votre PiCar-X n'a pas de microphone, vous pouvez utiliser la saisie de texte au clavier pour interagir avec lui en ex√©cutant les commandes suivantes.

#. Maintenant, ex√©cutez les commandes suivantes en utilisant sudo, car le haut-parleur de PiCar-X ne fonctionnera pas sans cela. Le processus prendra un peu de temps pour se terminer.

   .. code-block:: shell

      cd ~/picar-x/gpt_examples/
      sudo ~/my_venv/bin/python3 gpt_car.py --keyboard

#. Une fois que les commandes ont √©t√© ex√©cut√©es avec succ√®s, vous verrez la sortie suivante, indiquant que tous les composants de PiCar-X sont pr√™ts.

   .. code-block:: shell

      vilib 0.3.8 launching ...
      picamera2 0.3.19

      Web display on:
         http://rpi_ip:9000/mjpg

      Starting web streaming ...
      * Serving Flask app 'vilib.vilib'
      * Debug mode: off

      input:

#. Un lien vous sera √©galement fourni pour visualiser le flux de la cam√©ra de PiCar-X sur votre navigateur web : ``http://rpi_ip:9000/mjpg``.

   .. image:: img/apt_ip_camera.png
      :width: 700
      :align: center

#. Vous pouvez maintenant taper vos commandes dans la fen√™tre du terminal, et appuyer sur Entr√©e pour les envoyer. Les r√©ponses de PiCar-X pourraient vous surprendre.

   .. note::
      
      PiCar-X doit recevoir votre saisie, l'envoyer √† GPT pour traitement, recevoir la r√©ponse, puis la lire via la synth√®se vocale. Ce processus prend un certain temps, alors soyez patient.

   .. image:: img/apt_keyboard_input.png
      :width: 700
      :align: center

#. Si vous utilisez le mod√®le GPT-4O, vous pouvez √©galement poser des questions en fonction de ce que voit PiCar-X.

Communication vocale
^^^^^^^^^^^^^^^^^^^^^^^^

Si votre PiCar-X est √©quip√© d'un microphone, ou que vous pouvez en acheter un en cliquant sur |link_microphone|, vous pouvez interagir avec PiCar-X en utilisant des commandes vocales.

#. Tout d'abord, v√©rifiez que le Raspberry Pi a d√©tect√© le microphone.

   .. code-block:: shell

      arecord -l

   Si c'est r√©ussi, vous recevrez les informations suivantes, indiquant que votre microphone a √©t√© d√©tect√©.

   .. code-block:: 
      
      **** List of CAPTURE Hardware Devices ****
      card 3: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio]
      Subdevices: 1/1
      Subdevice #0: subdevice #0

#. Ex√©cutez la commande suivante, puis parlez √† PiCar-X ou √©mettez des sons. Le microphone enregistrera les sons dans le fichier ``op.wav``. Appuyez sur ``Ctrl + C`` pour arr√™ter l'enregistrement.

   .. code-block:: shell

      rec op.wav

#. Enfin, utilisez la commande ci-dessous pour lire le son enregistr√©, confirmant que le microphone fonctionne correctement.

   .. code-block:: shell

      sudo play op.wav

#. Maintenant, ex√©cutez les commandes suivantes en utilisant sudo, car le haut-parleur de PiCar-X ne fonctionnera pas sans cela. Le processus prendra un peu de temps pour se terminer.

   .. code-block:: shell

      cd ~/picar-x/gpt_examples/
      sudo ~/my_venv/bin/python3 gpt_car.py

#. Une fois que les commandes ont √©t√© ex√©cut√©es avec succ√®s, vous verrez la sortie suivante, indiquant que tous les composants de PiCar-X sont pr√™ts.

   .. code-block:: shell
      
      vilib 0.3.8 launching ...
      picamera2 0.3.19

      Web display on:
         http://rpi_ip:9000/mjpg

      Starting web streaming ...
      * Serving Flask app 'vilib.vilib'
      * Debug mode: off

      listening ...

#. Un lien vous sera √©galement fourni pour visualiser le flux de la cam√©ra de PiCar-X sur votre navigateur web : ``http://rpi_ip:9000/mjpg``.

   .. image:: img/apt_ip_camera.png
      :width: 700
      :align: center

#. Vous pouvez maintenant parler √† PiCar-X, et ses r√©ponses pourraient vous surprendre.

   .. note::
      
      PiCar-X doit recevoir votre saisie, la convertir en texte, l'envoyer √† GPT pour traitement, recevoir la r√©ponse, puis la lire via la synth√®se vocale. Ce processus prend un certain temps, alors soyez patient.

   .. image:: img/apt_speech_input.png
      :width: 700
      :align: center

#. Si vous utilisez le mod√®le GPT-4O, vous pouvez √©galement poser des questions en fonction de ce que voit PiCar-X.


5. Modification des param√®tres [facultatif]
----------------------------------------------

Dans le fichier ``gpt_car.py``, localisez les lignes suivantes. Vous pouvez modifier ces param√®tres pour configurer la langue STT, le gain du volume TTS et le r√¥le de la voix.

* **STT (Speech to Text)** fait r√©f√©rence au processus o√π le microphone de PiCar-X capte la voix et la convertit en texte √† envoyer √† GPT. Vous pouvez sp√©cifier la langue pour une meilleure pr√©cision et une latence r√©duite dans cette conversion.

* **TTS (Text to Speech)** est le processus de conversion des r√©ponses textuelles de GPT en parole, qui est lue via le haut-parleur de PiCar-X. Vous pouvez ajuster le gain du volume et s√©lectionner un r√¥le de voix pour la sortie TTS.

.. code-block:: python

   # openai assistant init
   # =================================================================
   openai_helper = OpenAiHelper(OPENAI_API_KEY, OPENAI_ASSISTANT_ID, 'picrawler')

   # LANGUAGE = ['zh', 'en'] # config stt language code, https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes
   LANGUAGE = []

   VOLUME_DB = 3 # tts volume gain, preferably less than 5db

   # select tts voice role, could be "alloy, echo, fable, onyx, nova, and shimmer"
   # https://platform.openai.com/docs/guides/text-to-speech/supported-languages
   TTS_VOICE = 'nova'


* Variable ``LANGUAGE``: 

  * Am√©liore la pr√©cision et le temps de r√©ponse du Speech-to-Text (STT).
  * ``LANGUAGE = []`` signifie prendre en charge toutes les langues, mais cela peut r√©duire la pr√©cision du STT et augmenter la latence.
  * Il est recommand√© de d√©finir une ou plusieurs langues sp√©cifiques en utilisant les codes de langue |link_iso_language_code| pour am√©liorer les performances.

* Variable ``VOLUME_DB``:

  * Contr√¥le le gain appliqu√© √† la sortie du Text-to-Speech (TTS).
  * Augmenter la valeur augmentera le volume, mais il est pr√©f√©rable de garder la valeur en dessous de 5dB pour √©viter les distorsions audio.

* Variable ``TTS_VOICE``:

  * S√©lectionnez le r√¥le de voix pour la sortie du Text-to-Speech (TTS).
  * Options disponibles : ``alloy, echo, fable, onyx, nova, shimmer``.
  * Vous pouvez exp√©rimenter avec diff√©rentes voix √† partir de |link_voice_options| pour trouver celle qui convient le mieux au ton et au public souhait√©. Les voix disponibles sont actuellement optimis√©es pour l'anglais.
